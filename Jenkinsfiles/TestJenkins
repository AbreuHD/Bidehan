pipeline {
    agent { label 'Africa' }
    environment {
        NUGET_API_KEY = credentials('private_nuget_api_key')
        NUGET_SERVER_URL = credentials('private_nuget_uri')
    }

    stages {
        stage('Restore dependencies') {
            steps {
                echo 'Restoring project dependencies...'
                sh 'dotnet restore Bidehan.sln'
            }
        }
        stage('SonarQube Analysis') {
            def scannerHome = tool 'SonarScanner for .NET'
            withSonarQubeEnv() {
                sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:\"Bidehan\""
                sh "dotnet build"
                sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
            }
       }
        stage('Create NuGet package') {
            steps {
                echo 'Packing the project...'
                // Empaquetar el proyecto con dotnet
                sh 'dotnet pack Application/Application.csproj --configuration Release --output ./nupkgs'
            }
        }

        stage('Publish NuGet package') {
            steps {
                echo 'Uploading NuGet package to the repository...'
                // Subir el paquete con dotnet usando las variables correctas
                sh '''
                dotnet nuget push ./nupkgs/*.nupkg \
                    --source $NUGET_SERVER_URL \
                    --api-key $NUGET_API_KEY
                '''
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully. The package has been released.'
        }
        failure {
            echo 'Pipeline failed. Check for errors in the console.'
        }
    }
}
